static const int SceneTextureId = 14;
float2 SceneUV = GetDefaultSceneTextureUV(Parameters, SceneTextureId);
float2 Resolution = ViewSize / DitherSize;
float2 PixelPositionDither = PixelPosition / DitherSize;
float2 PixelPositionDitherFloor = floor(PixelPositionDither);
float2 SceneUVFloor = SceneUV * PixelPositionDitherFloor / PixelPositionDither;
SceneUV = floor(SceneUV * Resolution) / Resolution;

// Luminosity of Scene Pixel
float3 PixelColor = SceneTextureLookup(SceneUVFloor, SceneTextureId, 0).rgb;
float initialLum = dot(PixelColor, float3(0.299f, 0.587f, 0.114f));

// adjust with contrast and offset parameters
float lum = (initialLum - 0.5 + offset) * contrast + 0.5;
lum = clamp(lum, 0.0, 1.0);

// reduce luminosity bit depth to give a more banded visual if desired
float bits = float(bit_depth);
lum = floor(lum * bits) / bits;

// Bayer pattern
float2 TextureDim;
Tex.GetDimensions(TextureDim.x, TextureDim.y);
float2 PatternUV = int2(SceneUV * Resolution) / TextureDim;
float2 PixelUV = PixelPositionDitherFloor / TextureDim;
float threshold = Texture2DSample(Tex, TexSampler, PixelUV).r;

// Thresholding
// float rampVal = lum < threshold ? threshold - lum : 1.0f;
float rampVal = lum < threshold ? 0.0f : 1.0f;
rampVal = lerp(0.01f, 0.99f, rampVal);
float3 rgb = Texture2DSample(RampTex, TexSampler, float2(rampVal, 0.5f)).rgb;

float3 result;

if (PixelPosition.x / ViewSize.x > 0.5) {
	result = rgb;
} else {
	result = rampVal;
}

return result;
